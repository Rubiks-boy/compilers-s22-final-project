/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var hasty = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,57],$V1=[1,4],$V2=[1,5],$V3=[2,59],$V4=[1,16],$V5=[16,50],$V6=[1,24],$V7=[2,72],$V8=[1,32],$V9=[1,33],$Va=[1,28],$Vb=[1,29],$Vc=[1,30],$Vd=[1,31],$Ve=[1,39],$Vf=[13,15,16,17,23,45,50,52],$Vg=[2,80],$Vh=[1,43],$Vi=[1,44],$Vj=[1,45],$Vk=[1,49],$Vl=[5,59,61],$Vm=[1,60],$Vn=[1,62],$Vo=[1,63],$Vp=[1,64],$Vq=[1,75],$Vr=[1,66],$Vs=[1,70],$Vt=[2,12],$Vu=[1,67],$Vv=[1,68],$Vw=[1,69],$Vx=[1,71],$Vy=[1,72],$Vz=[1,73],$VA=[1,74],$VB=[1,76],$VC=[1,77],$VD=[7,11,12,14,15,18,19,23,24,25,26,27,28,29,42,43,47,48],$VE=[1,93],$VF=[1,92],$VG=[1,94],$VH=[1,95],$VI=[1,96],$VJ=[1,97],$VK=[1,98],$VL=[1,99],$VM=[1,100],$VN=[1,101],$VO=[1,102],$VP=[1,103],$VQ=[1,104],$VR=[1,105],$VS=[1,106],$VT=[13,16,17,20,23,28,30,31,32,33,34,35,36,37,38,39,40,41,44,45,50,52],$VU=[1,118],$VV=[2,44],$VW=[13,16,17,20,23,28,30,31,32,33,34,35,36,37,38,39,40,44,45,50,52],$VX=[13,16,17,20,23,28,30,33,34,35,36,37,38,39,40,44,45,50,52],$VY=[13,16,17,20,23,39,40,45,50,52],$VZ=[24,59,75,76];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"Program":3,"Declarations":4,"EOF":5,"Statement":6,"IF":7,"Expression":8,"Block":9,"ELSE":10,"WHILE":11,"RETURN":12,"SEMI":13,"PRINT":14,"LPAREN":15,"RPAREN":16,"ASSIGN":17,"VAR":18,"IDENT":19,"COLON":20,"Type":21,"Statements":22,"LBRACE":23,"RBRACE":24,"ICONST":25,"BCONST":26,"SCONST":27,"MINUS":28,"BANG":29,"PLUS":30,"STAR":31,"SLASH":32,"EQEQ":33,"NEQEQ":34,"LESS":35,"GREATER":36,"LESSEQ":37,"GREATEREQ":38,"ANDAND":39,"OROR":40,"DOT":41,"CAST":42,"NIL":43,"QUERYQUERY":44,"QUERY":45,"Expressionz":46,"CLASSNAME":47,"LBRACKET":48,"Recordz":49,"RBRACKET":50,"Expressions":51,"COMMA":52,"INT":53,"BOOL":54,"STRING":55,"VOID":56,"Parameterz":57,"Declaration":58,"FUNC":59,"ARROW":60,"CLASS":61,"Superclass":62,"Fieldz":63,"Constructor":64,"Methodz":65,"Parameters":66,"Parameter":67,"Records":68,"Record":69,"Field":70,"INIT":71,"SuperInit":72,"SUPER":73,"Method":74,"OVERRIDE":75,"STATIC":76,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"IF",10:"ELSE",11:"WHILE",12:"RETURN",13:"SEMI",14:"PRINT",15:"LPAREN",16:"RPAREN",17:"ASSIGN",18:"VAR",19:"IDENT",20:"COLON",23:"LBRACE",24:"RBRACE",25:"ICONST",26:"BCONST",27:"SCONST",28:"MINUS",29:"BANG",30:"PLUS",31:"STAR",32:"SLASH",33:"EQEQ",34:"NEQEQ",35:"LESS",36:"GREATER",37:"LESSEQ",38:"GREATEREQ",39:"ANDAND",40:"OROR",41:"DOT",42:"CAST",43:"NIL",44:"QUERYQUERY",45:"QUERY",47:"CLASSNAME",48:"LBRACKET",50:"RBRACKET",52:"COMMA",53:"INT",54:"BOOL",55:"STRING",56:"VOID",59:"FUNC",60:"ARROW",61:"CLASS",71:"INIT",73:"SUPER",75:"OVERRIDE",76:"STATIC"},
productions_: [0,[3,2],[6,3],[6,5],[6,1],[6,3],[6,2],[6,3],[6,5],[6,4],[6,7],[6,2],[22,0],[22,2],[9,3],[8,1],[8,1],[8,1],[8,1],[8,2],[8,2],[8,3],[8,3],[8,3],[8,3],[8,3],[8,3],[8,3],[8,3],[8,3],[8,3],[8,3],[8,3],[8,3],[8,5],[8,1],[8,3],[8,5],[8,4],[8,3],[8,6],[8,6],[8,4],[8,3],[46,0],[46,1],[51,1],[51,3],[21,1],[21,1],[21,1],[21,2],[21,1],[21,1],[21,3],[58,8],[58,8],[4,0],[4,2],[57,0],[57,1],[66,1],[66,3],[67,3],[49,0],[49,1],[68,1],[68,3],[69,3],[62,0],[62,2],[70,5],[63,0],[63,2],[64,6],[72,0],[72,5],[74,8],[74,9],[74,9],[65,0],[65,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 typeof console !== 'undefined' ? console.log(JSON.stringify($$[$0-1], null, 2)) : print(JSON.stringify($$[$0-1], null, 2));
          return $$[$0-1]; 
break;
case 2:
 this.$ = {statementType: 'If', condition: $$[$0-1], ifCase: $$[$0], elseCase: {statementType: 'Block', block: []}}; 
break;
case 3:
 this.$ = {statementType: 'If', condition: $$[$0-3], ifCase: $$[$0-2], elseCase: $$[$0]}; 
break;
case 4:
 this.$ = {statementType: 'Block', block: $$[$0]}; 
break;
case 5:
 this.$ = {statementType: 'While', condition: $$[$0-1], body: $$[$0]}; 
break;
case 6:
 this.$ = {statementType: 'Return'}; 
break;
case 7:
 this.$ = {statementType: 'Return', returnValue: $$[$0-1]}; 
break;
case 8:
 this.$ = {statementType: 'Print', printValue: $$[$0-2]}; 
break;
case 9:
 this.$ = {statementType: 'Assign', leftSide: $$[$0-3], rightSide: $$[$0-1]}; 
break;
case 10:
 this.$ = {statementType: 'VarDecl', leftSide: $$[$0-5], type: $$[$0-3], rightSide: $$[$0-1]}; 
break;
case 11:
 this.$ = {statementType: 'Expr', expr: $$[$0-1]}; 
break;
case 12: case 44: case 72:
 this.$ = [] 
break;
case 13: case 73:
 this.$ = [$$[$0-1]].concat($$[$0]) 
break;
case 14:
 this.$ = {statementType: 'Block', block: $$[$0-1]} 
break;
case 15:
 this.$ = {exprType: 'ConstI', value: Number($$[$0])}; 
break;
case 16:
 this.$ = {exprType: 'ConstB', value: Boolean($$[$0])}; 
break;
case 17:
 this.$ = {exprType: 'ConstS', value: $$[$0]}; 
break;
case 18:
 this.$ = {exprType: 'Var', identifier: $$[$0]}; 
break;
case 19:
 this.$ = {exprType: 'Uop', op: 'Neg', expr: $$[$0]}; 
break;
case 20:
 this.$ = {exprType: 'Uop', op: 'Not', expr: $$[$0]}; 
break;
case 21:
 this.$ = {exprType: 'Bop', expr1: $$[$0-2], op: 'Plus', expr2: $$[$0]}; 
break;
case 22:
 this.$ = {exprType: 'Bop', expr1: $$[$0-2], op: 'Minus', expr2: $$[$0]}; 
break;
case 23:
 this.$ = {exprType: 'Bop', expr1: $$[$0-2], op: 'Times', expr2: $$[$0]}; 
break;
case 24:
 this.$ = {exprType: 'Bop', expr1: $$[$0-2], op: 'Div', expr2: $$[$0]}; 
break;
case 25:
 this.$ = {exprType: 'Bop', expr1: $$[$0-2], op: 'Eq', expr2: $$[$0]}; 
break;
case 26:
 this.$ = {exprType: 'Bop', expr1: $$[$0-2], op: 'Ne', expr2: $$[$0]}; 
break;
case 27:
 this.$ = {exprType: 'Bop', expr1: $$[$0-2], op: 'Lt', expr2: $$[$0]}; 
break;
case 28:
 this.$ = {exprType: 'Bop', expr1: $$[$0-2], op: 'Gt', expr2: $$[$0]}; 
break;
case 29:
 this.$ = {exprType: 'Bop', expr1: $$[$0-2], op: 'Le', expr2: $$[$0]}; 
break;
case 30:
 this.$ = {exprType: 'Bop', expr1: $$[$0-2], op: 'Ge', expr2: $$[$0]}; 
break;
case 31:
 this.$ = {exprType: 'Bop', expr1: $$[$0-2], op: 'And', expr2: $$[$0]}; 
break;
case 32:
 this.$ = {exprType: 'Bop', expr1: $$[$0-2], op: 'Or', expr2: $$[$0]}; 
break;
case 33:
 this.$ = {exprType: 'Proj', expr: $$[$0-2], value: $$[$0]}; 
break;
case 34:
 this.$ = {exprType: 'Convert', targetType: $$[$0-3], expr: $$[$0-1]}; 
break;
case 35:
 this.$ = {exprType: 'Nil'}; 
break;
case 36:
 this.$ = {exprType: 'Coalesce', expr1: $$[$0-2], expr2: $$[$0]}; 
break;
case 37:
 this.$ = {exprType: 'Ternary', expr1: $$[$0-4], expr2: $$[$0-2], expr3: $$[$0]}; 
break;
case 38:
 this.$ = {exprType: 'Call', functionName: $$[$0-3], arguments: $$[$0-1]}; 
break;
case 39: case 76:
 this.$ = $$[$0-1]; 
break;
case 40:
 this.$ = {exprType: 'StaticCall', className: $$[$0-5], functionName: $$[$0-3], arguments: $$[$0-1]}; 
break;
case 41:
 this.$ = {exprType: 'Invoke', className: $$[$0-5], functionName: $$[$0-3], arguments: $$[$0-1]}; 
break;
case 42:
 this.$ = {exprType: 'New', className: $$[$0-3], arguments: $$[$0-1]}; 
break;
case 43:
 this.$ = {exprType: 'Record', records: $$[$0-1]}; 
break;
case 45:
 this.$ = $$[$0] 
break;
case 46:
 this.$ = [$$[$0]] 
break;
case 47:
 this.$ = [$$[$0-2]].concat($$[$0]) 
break;
case 48:
 this.$ = {type: 'Int'}; 
break;
case 49:
 this.$ = {type: 'Bool'}; 
break;
case 50:
 this.$ = {type: 'String'}; 
break;
case 51:
 this.$ = {type: 'Optional', optionalType: $$[$0-1]}; 
break;
case 52:
 this.$ = {type: 'Void'}; 
break;
case 53:
 this.$ = {type: 'Class', className: $$[$0]}; 
break;
case 54:
 this.$ = {type: 'Record', parameters: $$[$0-1]}; 
break;
case 55:
 this.$ = {declType: 'Func', functionName: $$[$0-6], parameters: $$[$0-4], returnType: $$[$0-1], body: $$[$0]}; 
break;
case 56:
 this.$ = {declType: 'Class', className: $$[$0-6], superClass: $$[$0-5], fields: $$[$0-3], constructor: $$[$0-2], methods: $$[$0-1]}; 
break;
case 57: case 59: case 64: case 80:
 this.$ = []; 
break;
case 58: case 81:
 this.$ = [$$[$0-1]].concat($$[$0]); 
break;
case 60: case 65: case 70:
 this.$ = $$[$0]; 
break;
case 61: case 66:
 this.$ = [$$[$0]]; 
break;
case 62: case 67:
 this.$ = [$$[$0-2]].concat($$[$0]); 
break;
case 63:
 this.$ = {identifier: $$[$0-2], type: $$[$0]}; 
break;
case 68:
 this.$ = {identifier: $$[$0-2], value: $$[$0]}; 
break;
case 69:
 this.$ = undefined; 
break;
case 71:
 this.$ = {identifier: $$[$0-3], type: $$[$0-1]}; 
break;
case 74:
 this.$ = {parameters: $$[$0-3], superInit: $$[$0-1], body: $$[$0]}; 
break;
case 75:
 this.$ = undefined 
break;
case 77:
 this.$ = {type: 'Virtual', name: $$[$0-6], parameters: $$[$0-4], returnType: $$[$0-1], body: $$[$0]}; 
break;
case 78:
 this.$ = {type: 'Override', name: $$[$0-6], parameters: $$[$0-4], returnType: $$[$0-1], body: $$[$0]}; 
break;
case 79:
 this.$ = {type: 'Static', name: $$[$0-6], parameters: $$[$0-4], returnType: $$[$0-1], body: $$[$0]}; 
break;
}
},
table: [{3:1,4:2,5:$V0,58:3,59:$V1,61:$V2},{1:[3]},{5:[1,6]},{4:7,5:$V0,58:3,59:$V1,61:$V2},{19:[1,8]},{47:[1,9]},{1:[2,1]},{5:[2,58]},{15:[1,10]},{20:[1,12],23:[2,69],62:11},{16:$V3,19:$V4,57:13,66:14,67:15},{23:[1,17]},{47:[1,18]},{16:[1,19]},o($V5,[2,60]),o($V5,[2,61],{52:[1,20]}),{20:[1,21]},{18:$V6,63:22,70:23,71:$V7},{23:[2,70]},{60:[1,25]},{19:$V4,66:26,67:15},{21:27,47:$V8,48:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd},{64:34,71:[1,35]},{18:$V6,63:36,70:23,71:$V7},{19:[1,37]},{21:38,47:$V8,48:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd},o($V5,[2,62]),o([16,50,52],[2,63],{45:$Ve}),o($Vf,[2,48]),o($Vf,[2,49]),o($Vf,[2,50]),o($Vf,[2,52]),o($Vf,[2,53]),{19:$V4,50:$V3,57:40,66:14,67:15},{24:$Vg,59:$Vh,65:41,74:42,75:$Vi,76:$Vj},{15:[1,46]},{71:[2,73]},{20:[1,47]},{9:48,23:$Vk,45:$Ve},o($Vf,[2,51]),{50:[1,50]},{24:[1,51]},{24:$Vg,59:$Vh,65:52,74:42,75:$Vi,76:$Vj},{19:[1,53]},{59:[1,54]},{59:[1,55]},{16:$V3,19:$V4,57:56,66:14,67:15},{21:57,47:$V8,48:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd},o($Vl,[2,55]),{6:59,7:$Vm,8:65,9:61,11:$Vn,12:$Vo,14:$Vp,15:$Vq,18:$Vr,19:$Vs,22:58,23:$Vk,24:$Vt,25:$Vu,26:$Vv,27:$Vw,28:$Vx,29:$Vy,42:$Vz,43:$VA,47:$VB,48:$VC},o($Vf,[2,54]),o($Vl,[2,56]),{24:[2,81]},{15:[1,78]},{19:[1,79]},{19:[1,80]},{16:[1,81]},{13:[1,82],45:$Ve},{24:[1,83]},{6:59,7:$Vm,8:65,9:61,11:$Vn,12:$Vo,14:$Vp,15:$Vq,18:$Vr,19:$Vs,22:84,23:$Vk,24:$Vt,25:$Vu,26:$Vv,27:$Vw,28:$Vx,29:$Vy,42:$Vz,43:$VA,47:$VB,48:$VC},{8:85,15:$Vq,19:$Vs,25:$Vu,26:$Vv,27:$Vw,28:$Vx,29:$Vy,42:$Vz,43:$VA,47:$VB,48:$VC},o($VD,[2,4]),{8:86,15:$Vq,19:$Vs,25:$Vu,26:$Vv,27:$Vw,28:$Vx,29:$Vy,42:$Vz,43:$VA,47:$VB,48:$VC},{8:88,13:[1,87],15:$Vq,19:$Vs,25:$Vu,26:$Vv,27:$Vw,28:$Vx,29:$Vy,42:$Vz,43:$VA,47:$VB,48:$VC},{15:[1,89]},{13:[1,91],17:[1,90],28:$VE,30:$VF,31:$VG,32:$VH,33:$VI,34:$VJ,35:$VK,36:$VL,37:$VM,38:$VN,39:$VO,40:$VP,41:$VQ,44:$VR,45:$VS},{19:[1,107]},o($VT,[2,15]),o($VT,[2,16]),o($VT,[2,17]),o($VT,[2,18],{15:[1,108]}),{8:109,15:$Vq,19:$Vs,25:$Vu,26:$Vv,27:$Vw,28:$Vx,29:$Vy,42:$Vz,43:$VA,47:$VB,48:$VC},{8:110,15:$Vq,19:$Vs,25:$Vu,26:$Vv,27:$Vw,28:$Vx,29:$Vy,42:$Vz,43:$VA,47:$VB,48:$VC},{21:111,47:$V8,48:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd},o($VT,[2,35]),{8:112,15:$Vq,19:$Vs,25:$Vu,26:$Vv,27:$Vw,28:$Vx,29:$Vy,42:$Vz,43:$VA,47:$VB,48:$VC},{15:[1,114],41:[1,113]},{19:$VU,49:115,50:[2,64],68:116,69:117},{16:$V3,19:$V4,57:119,66:14,67:15},{15:[1,120]},{15:[1,121]},{20:[1,123],23:[2,75],72:122},o([18,71],[2,71]),o([5,7,10,11,12,14,15,18,19,23,24,25,26,27,28,29,42,43,47,48,59,61,75,76],[2,14]),{24:[2,13]},{9:124,23:$Vk,28:$VE,30:$VF,31:$VG,32:$VH,33:$VI,34:$VJ,35:$VK,36:$VL,37:$VM,38:$VN,39:$VO,40:$VP,41:$VQ,44:$VR,45:$VS},{9:125,23:$Vk,28:$VE,30:$VF,31:$VG,32:$VH,33:$VI,34:$VJ,35:$VK,36:$VL,37:$VM,38:$VN,39:$VO,40:$VP,41:$VQ,44:$VR,45:$VS},o($VD,[2,6]),{13:[1,126],28:$VE,30:$VF,31:$VG,32:$VH,33:$VI,34:$VJ,35:$VK,36:$VL,37:$VM,38:$VN,39:$VO,40:$VP,41:$VQ,44:$VR,45:$VS},{8:127,15:$Vq,19:$Vs,25:$Vu,26:$Vv,27:$Vw,28:$Vx,29:$Vy,42:$Vz,43:$VA,47:$VB,48:$VC},{8:128,15:$Vq,19:$Vs,25:$Vu,26:$Vv,27:$Vw,28:$Vx,29:$Vy,42:$Vz,43:$VA,47:$VB,48:$VC},o($VD,[2,11]),{8:129,15:$Vq,19:$Vs,25:$Vu,26:$Vv,27:$Vw,28:$Vx,29:$Vy,42:$Vz,43:$VA,47:$VB,48:$VC},{8:130,15:$Vq,19:$Vs,25:$Vu,26:$Vv,27:$Vw,28:$Vx,29:$Vy,42:$Vz,43:$VA,47:$VB,48:$VC},{8:131,15:$Vq,19:$Vs,25:$Vu,26:$Vv,27:$Vw,28:$Vx,29:$Vy,42:$Vz,43:$VA,47:$VB,48:$VC},{8:132,15:$Vq,19:$Vs,25:$Vu,26:$Vv,27:$Vw,28:$Vx,29:$Vy,42:$Vz,43:$VA,47:$VB,48:$VC},{8:133,15:$Vq,19:$Vs,25:$Vu,26:$Vv,27:$Vw,28:$Vx,29:$Vy,42:$Vz,43:$VA,47:$VB,48:$VC},{8:134,15:$Vq,19:$Vs,25:$Vu,26:$Vv,27:$Vw,28:$Vx,29:$Vy,42:$Vz,43:$VA,47:$VB,48:$VC},{8:135,15:$Vq,19:$Vs,25:$Vu,26:$Vv,27:$Vw,28:$Vx,29:$Vy,42:$Vz,43:$VA,47:$VB,48:$VC},{8:136,15:$Vq,19:$Vs,25:$Vu,26:$Vv,27:$Vw,28:$Vx,29:$Vy,42:$Vz,43:$VA,47:$VB,48:$VC},{8:137,15:$Vq,19:$Vs,25:$Vu,26:$Vv,27:$Vw,28:$Vx,29:$Vy,42:$Vz,43:$VA,47:$VB,48:$VC},{8:138,15:$Vq,19:$Vs,25:$Vu,26:$Vv,27:$Vw,28:$Vx,29:$Vy,42:$Vz,43:$VA,47:$VB,48:$VC},{8:139,15:$Vq,19:$Vs,25:$Vu,26:$Vv,27:$Vw,28:$Vx,29:$Vy,42:$Vz,43:$VA,47:$VB,48:$VC},{8:140,15:$Vq,19:$Vs,25:$Vu,26:$Vv,27:$Vw,28:$Vx,29:$Vy,42:$Vz,43:$VA,47:$VB,48:$VC},{19:[1,141]},{8:142,15:$Vq,19:$Vs,25:$Vu,26:$Vv,27:$Vw,28:$Vx,29:$Vy,42:$Vz,43:$VA,47:$VB,48:$VC},{8:143,15:$Vq,19:$Vs,25:$Vu,26:$Vv,27:$Vw,28:$Vx,29:$Vy,42:$Vz,43:$VA,47:$VB,48:$VC},{20:[1,144]},{8:147,15:$Vq,16:$VV,19:$Vs,25:$Vu,26:$Vv,27:$Vw,28:$Vx,29:$Vy,42:$Vz,43:$VA,46:145,47:$VB,48:$VC,51:146},o($VW,[2,19],{41:$VQ}),o($VW,[2,20],{41:$VQ}),{15:[1,148],45:$Ve},{16:[1,149],28:$VE,30:$VF,31:$VG,32:$VH,33:$VI,34:$VJ,35:$VK,36:$VL,37:$VM,38:$VN,39:$VO,40:$VP,41:$VQ,44:$VR,45:$VS},{19:[1,150]},{8:147,15:$Vq,16:$VV,19:$Vs,25:$Vu,26:$Vv,27:$Vw,28:$Vx,29:$Vy,42:$Vz,43:$VA,46:151,47:$VB,48:$VC,51:146},{50:[1,152]},{50:[2,65]},{50:[2,66],52:[1,153]},{17:[1,154]},{16:[1,155]},{16:$V3,19:$V4,57:156,66:14,67:15},{16:$V3,19:$V4,57:157,66:14,67:15},{9:158,23:$Vk},{73:[1,159]},o($VD,[2,2],{10:[1,160]}),o($VD,[2,5]),o($VD,[2,7]),{16:[1,161],28:$VE,30:$VF,31:$VG,32:$VH,33:$VI,34:$VJ,35:$VK,36:$VL,37:$VM,38:$VN,39:$VO,40:$VP,41:$VQ,44:$VR,45:$VS},{13:[1,162],28:$VE,30:$VF,31:$VG,32:$VH,33:$VI,34:$VJ,35:$VK,36:$VL,37:$VM,38:$VN,39:$VO,40:$VP,41:$VQ,44:$VR,45:$VS},o($VX,[2,21],{31:$VG,32:$VH,41:$VQ}),o($VX,[2,22],{31:$VG,32:$VH,41:$VQ}),o($VW,[2,23],{41:$VQ}),o($VW,[2,24],{41:$VQ}),o($VY,[2,25],{28:$VE,30:$VF,31:$VG,32:$VH,41:$VQ,44:$VR}),o($VY,[2,26],{28:$VE,30:$VF,31:$VG,32:$VH,41:$VQ,44:$VR}),o($VY,[2,27],{28:$VE,30:$VF,31:$VG,32:$VH,41:$VQ,44:$VR}),o($VY,[2,28],{28:$VE,30:$VF,31:$VG,32:$VH,41:$VQ,44:$VR}),o($VY,[2,29],{28:$VE,30:$VF,31:$VG,32:$VH,41:$VQ,44:$VR}),o($VY,[2,30],{28:$VE,30:$VF,31:$VG,32:$VH,41:$VQ,44:$VR}),o($VY,[2,31],{28:$VE,30:$VF,31:$VG,32:$VH,33:$VI,34:$VJ,35:$VK,36:$VL,37:$VM,38:$VN,41:$VQ,44:$VR}),o([13,16,17,20,23,40,45,50,52],[2,32],{28:$VE,30:$VF,31:$VG,32:$VH,33:$VI,34:$VJ,35:$VK,36:$VL,37:$VM,38:$VN,39:$VO,41:$VQ,44:$VR}),o($VT,[2,33],{15:[1,163]}),o([13,16,17,20,23,33,34,35,36,37,38,39,40,45,50,52],[2,36],{28:$VE,30:$VF,31:$VG,32:$VH,41:$VQ,44:$VR}),{20:[1,164],28:$VE,30:$VF,31:$VG,32:$VH,33:$VI,34:$VJ,35:$VK,36:$VL,37:$VM,38:$VN,39:$VO,40:$VP,41:$VQ,44:$VR,45:$VS},{21:165,47:$V8,48:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd},{16:[1,166]},{16:[2,45]},{16:[2,46],28:$VE,30:$VF,31:$VG,32:$VH,33:$VI,34:$VJ,35:$VK,36:$VL,37:$VM,38:$VN,39:$VO,40:$VP,41:$VQ,44:$VR,45:$VS,52:[1,167]},{8:168,15:$Vq,19:$Vs,25:$Vu,26:$Vv,27:$Vw,28:$Vx,29:$Vy,42:$Vz,43:$VA,47:$VB,48:$VC},o($VT,[2,39]),{15:[1,169]},{16:[1,170]},o($VT,[2,43]),{19:$VU,68:171,69:117},{8:172,15:$Vq,19:$Vs,25:$Vu,26:$Vv,27:$Vw,28:$Vx,29:$Vy,42:$Vz,43:$VA,47:$VB,48:$VC},{60:[1,173]},{16:[1,174]},{16:[1,175]},o($VZ,[2,74]),{15:[1,176]},{6:177,7:$Vm,8:65,9:61,11:$Vn,12:$Vo,14:$Vp,15:$Vq,18:$Vr,19:$Vs,23:$Vk,25:$Vu,26:$Vv,27:$Vw,28:$Vx,29:$Vy,42:$Vz,43:$VA,47:$VB,48:$VC},{13:[1,178]},o($VD,[2,9]),{8:147,15:$Vq,16:$VV,19:$Vs,25:$Vu,26:$Vv,27:$Vw,28:$Vx,29:$Vy,42:$Vz,43:$VA,46:179,47:$VB,48:$VC,51:146},{8:180,15:$Vq,19:$Vs,25:$Vu,26:$Vv,27:$Vw,28:$Vx,29:$Vy,42:$Vz,43:$VA,47:$VB,48:$VC},{17:[1,181],45:$Ve},o($VT,[2,38]),{8:147,15:$Vq,19:$Vs,25:$Vu,26:$Vv,27:$Vw,28:$Vx,29:$Vy,42:$Vz,43:$VA,47:$VB,48:$VC,51:182},{16:[1,183],28:$VE,30:$VF,31:$VG,32:$VH,33:$VI,34:$VJ,35:$VK,36:$VL,37:$VM,38:$VN,39:$VO,40:$VP,41:$VQ,44:$VR,45:$VS},{8:147,15:$Vq,16:$VV,19:$Vs,25:$Vu,26:$Vv,27:$Vw,28:$Vx,29:$Vy,42:$Vz,43:$VA,46:184,47:$VB,48:$VC,51:146},o($VT,[2,42]),{50:[2,67]},o([50,52],[2,68],{28:$VE,30:$VF,31:$VG,32:$VH,33:$VI,34:$VJ,35:$VK,36:$VL,37:$VM,38:$VN,39:$VO,40:$VP,41:$VQ,44:$VR,45:$VS}),{21:185,47:$V8,48:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd},{60:[1,186]},{60:[1,187]},{8:147,15:$Vq,16:$VV,19:$Vs,25:$Vu,26:$Vv,27:$Vw,28:$Vx,29:$Vy,42:$Vz,43:$VA,46:188,47:$VB,48:$VC,51:146},o($VD,[2,3]),o($VD,[2,8]),{16:[1,189]},o([13,16,17,20,23,50,52],[2,37],{28:$VE,30:$VF,31:$VG,32:$VH,33:$VI,34:$VJ,35:$VK,36:$VL,37:$VM,38:$VN,39:$VO,40:$VP,41:$VQ,44:$VR,45:$VS}),{8:190,15:$Vq,19:$Vs,25:$Vu,26:$Vv,27:$Vw,28:$Vx,29:$Vy,42:$Vz,43:$VA,47:$VB,48:$VC},{16:[2,47]},o($VT,[2,34]),{16:[1,191]},{9:192,23:$Vk,45:$Ve},{21:193,47:$V8,48:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd},{21:194,47:$V8,48:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd},{16:[1,195]},o($VT,[2,41]),{13:[1,196],28:$VE,30:$VF,31:$VG,32:$VH,33:$VI,34:$VJ,35:$VK,36:$VL,37:$VM,38:$VN,39:$VO,40:$VP,41:$VQ,44:$VR,45:$VS},o($VT,[2,40]),o($VZ,[2,77]),{9:197,23:$Vk,45:$Ve},{9:198,23:$Vk,45:$Ve},{23:[2,76]},o($VD,[2,10]),o($VZ,[2,78]),o($VZ,[2,79])],
defaultActions: {6:[2,1],7:[2,58],18:[2,70],36:[2,73],52:[2,81],84:[2,13],116:[2,65],146:[2,45],171:[2,67],182:[2,47],195:[2,76]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/* comments */
break;
case 2:return 33
break;
case 3:return 34
break;
case 4:return 37
break;
case 5:return 38
break;
case 6:return 35
break;
case 7:return 36
break;
case 8:return 39
break;
case 9:return 40
break;
case 10:return 44
break;
case 11:return 60
break;
case 12:return 13
break;
case 13:return 30
break;
case 14:return 28
break;
case 15:return 31
break;
case 16:return 32
break;
case 17:return 15
break;
case 18:return 16
break;
case 19:return 17
break;
case 20:return 23
break;
case 21:return 24
break;
case 22:return 48
break;
case 23:return 50
break;
case 24:return 45
break;
case 25:return 29
break;
case 26:return 52
break;
case 27:return 20
break;
case 28:return 41
break;
case 29:return 10
break;
case 30:return 59
break;
case 31:return 7
break;
case 32:return 43
break;
case 33:return 14
break;
case 34:return 12
break;
case 35:return 11
break;
case 36:return 18
break;
case 37:return 26
break;
case 38:return 26
break;
case 39:return 53
break;
case 40:return 54
break;
case 41:return 55
break;
case 42:return 56
break;
case 43:return 42
break;
case 44:return 61
break;
case 45:return 71
break;
case 46:return 76
break;
case 47:return 73
break;
case 48:return 75
break;
case 49:return 25
break;
case 50:return 25
break;
case 51:return 19
break;
case 52:return 47
break;
case 53:return 27
break;
case 54:return 5
break;
case 55:return 'INVALID'
break;
}
},
rules: [/^(?:[\ \t\n]+)/,/^(?:\/\/.*\n)/,/^(?:==)/,/^(?:!=)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:\?\?)/,/^(?:->)/,/^(?:;)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:\()/,/^(?:\))/,/^(?:=)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\?)/,/^(?:!)/,/^(?:,)/,/^(?::)/,/^(?:\.)/,/^(?:else\b)/,/^(?:func\b)/,/^(?:if\b)/,/^(?:nil\b)/,/^(?:print\b)/,/^(?:return\b)/,/^(?:while\b)/,/^(?:var\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:Int\b)/,/^(?:Bool\b)/,/^(?:String\b)/,/^(?:Void\b)/,/^(?:cast\b)/,/^(?:class\b)/,/^(?:init\b)/,/^(?:static\b)/,/^(?:super\b)/,/^(?:override\b)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:0x[0-9A-Fa-f]+)/,/^(?:[a-z][a-zA-Z0-9]*)/,/^(?:[A-Z][a-zA-Z0-9]*)/,/^(?:[\"]([^\\\"]|\\.)*[\"])/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = hasty;
exports.Parser = hasty.Parser;
exports.parse = function () { return hasty.parse.apply(hasty, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}