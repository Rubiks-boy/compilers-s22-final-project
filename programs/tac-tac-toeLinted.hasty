// Come up with an "interesting" example of hasty doing some
//   nontrivial computation or using some nontrivial data structure.

// What does the program do?
// Tac-Tac-Toe

// Helper functions
func expo(base: Int, exponent: Int)-> Int {
    if (exponent == 0) {
        return 1;
    }
    else {
        return base * expo(base, exponent - 1);
    }
}

func mod3(x: Int)-> Int {
    if (x / 3 * 3 == x) {
        return 0;
    }

    if ((x + 2) / 3 * 3 == (x + 2)) {
        return 1;
    }

    return 2;
}

// Board state
// We represent the board using a base-3 integer, where
// for each place value,
// 0 is empty
// 1 is x
// 2 is o
// For example, a state of 7 represents an O in position 1
// and an X in position 0.
classBoard {
    var state: Int;
    init() {
        self.state = 0;
        return;
    }

    func set(pos: Int, val: Int)-> Void {
        // pos 0-8, val 1/2
        // Being able to set positions that are
        // already set is a feature not a bug xD
        // For example, if you put an O on top of an x
        // it increments the next position by 1
        self.state = self.state + (val * expo(3, pos));
    }

    func get(pos: Int)-> Int {
        return mod3(self.state / expo(3, pos));
    }

    func getS(pos: Int)-> String {
        var posVal: Int = self.get(pos);
        if (posVal == 1) {
            return "X";
        }

        if (posVal == 2) {
            return "O";
        }

        return " ";
    }

    func printBoard()-> Void {
        print(self.getS(0) + "|" + self.getS(1) + "|" + self.getS(2));
        print("-+-+-");
        print(self.getS(3) + "|" + self.getS(4) + "|" + self.getS(5));
        print("-+-+-");
        print(self.getS(6) + "|" + self.getS(7) + "|" + self.getS(8));
    }

    func winningWithSide(side: Int)-> Bool {
        // row
        var row: Int = 0;
        while (row <= 2) {
            if (self.get(row * 3 + 0) == side && self.get(row * 3 + 1) == side && self.get(row * 3 + 2) == side) {
                return true;
            }

            row = row + 1;
        }

        // col
        var col: Int = 0;
        while (col <= 2) {
            if (self.get(0 * 3 + col) == side && self.get(1 * 3 + col) == side && self.get(2 * 3 + col) == side) {
                return true;
            }

            col = col + 1;
        }

        // diag1
        if (self.get(0 * 3 + 0) == side && self.get(1 * 3 + 1) == side && self.get(2 * 3 + 2) == side) {
            return true;
        }

        // diag2
        if (self.get(2 * 3 + 0) == side && self.get(1 * 3 + 1) == side && self.get(0 * 3 + 2) == side) {
            return true;
        }

        return false;
    }
}

func cs132start()-> Void {
    print("0" + "|" + "1" + "|" + "2");
    print("-+-+-");
    print("3" + "|" + "4" + "|" + "5");
    print("-+-+-");
    print("6" + "|" + "7" + "|" + "8");
    var b: Board = Board();
    var s: String = "";

    // Read in turns by asking for ints between
    // 0-8 until someone wins :)
    while (true) {
        // x
        print("x's turn (input 0-8)");
        s = readLine();
        b.set(castInt ? (s) ?? 0, 1);
        b.printBoard();
        if (b.winningWithSide(1)) {
            print("x wins!");
            return;
        }

        // o
        print("o's turn (input 0-8)");
        s = readLine();
        b.set(castInt ? (s) ?? 0, 2);
        b.printBoard();
        if (b.winningWithSide(2)) {
            print("o wins!");
            return;
        }
    }
}

